in the previous video we learned about the cluster module which helps with performance Improvement in a node application.
in this video let's learn about the worker threads module which also helps with the same cause.
the worker threats module enables the use of threads that execute JavaScript in parallel.
code executed in a worker thread runs in a separate child process preventing it from blocking your main application.
but how is this module different from the cluster module.
well the cluster module can be used to run multiple instances of node.js that can distribute work loads.
work a threads module on the other hand allows running multiple application threads within a single node.js instance.
when process isolation is not needed there is no separate instances of V8event Loop and memory are needed you should use worker threads.
let's head back to vs code and understand its usage with an example.
I'm going to create a new file called Main thread.js.
and within the file I'm going to paste a code snippet.
now this is 99 the same code we had seen in the previous video.
we create an HTTP server and handle two routes.
a home page route and a slow page route.
the slope is Route is one that has as mall modification.
I have introduced a variable called J.
which I increment within the for Loop.
after the for Loop is done the J variable is returned as part of the response text.
we then listen on Port 8000.
let's now run node main thread in the terminal.
and head to the browser.
once again I'm going to navigate to both the routes with the network panel open.
visit home page and we see this takes 10 milliseconds.
navigate to slash slow page and we see this takes five seconds.
we also see the value of J being returned.
if I reload this slow page quickly and reload the home page.
you see the home page is indeed blocked while the first request is being served.
it has taken 4.7 seconds.
slow page 5.7 seconds.
there is room for performance Improvement and this is where the worker threads module comes into picture.
let me explain the necessary changes in main thread we are going to import the worker threads module.
we destructure the worker Constructor.
next we are going to alter the slow page route.
first we create a new worker thread using the worker function.
const worker is equal to new worker.
to this function we pass in path to a worker file as argument.
dot slash worker thread.js.
we don't have this file yet so let's create it.
next we're going to move the long operation from the main thread and place it in the worker thread.
cut and paste.
but what we are going to do now is send the value of this variable J back to the main thread.
for that we once again rely on the worker threads module copy paste it but this time we import the parent Port object.
after the for Loop we call parent Port dot post message passing in the value of J.
now we can listen to messages in the main thread using the message event.
worker dot on.
Message and we have a callback function.
we get access to the data passed back which is the variable J and we will respond with that value.
and that is pretty much it let's restart the server.
and head back to the browser.
if we now reload the slow page.
and quickly reload the home page.
you can see the home page only takes two milliseconds.
it is not blocked by the slow page which has taken five seconds.
we also see the value of J being displayed which is a value sent from the worker thread to the main thread.
as you can see the worker threads module offers something similar to the thread pool it's not true multi-threading but it lets you execute code in parallel outside the main thread.
a good use case for using worker threads module is when you have to resize images or videos or even perhaps encrypt files.
what we have seen here is a me reintroduction to the worker threads module.
there is a lot more to it and I suggest you go through the documentation when you have the time.
but for now thank you for watching and I'll see you in the next video"

