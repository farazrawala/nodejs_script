"welcome back in the previous video we had a look at what is npm and why do we need it.
in this video let's take a look at our first concept Under the npm Umbrella which is package.json.
now what is it well package.json is npm's configuration file.
it is a Json file that typically lives in the root directory of your package and holds various meta data relevant to that package.
why do we need package.json well package.json is the central place to configure and describe how to interact with and run your package.
it is primarily used by the npm CLI.
let's head back to vs code and create our own package.json file.
I'm going to create a new folder called my custom package.
within the folder I'm going to create anew file index.js.
within the file I'm going to default export a simple greet function.
accepts name and logs to the console.
hello followed by the name and the text welcome to code evolution.
module.export greet this is the code we would like to eventually package and publish to the npm  registry.
but in order to do that we need a package.json file let's create it.
within the same folder package.json.
since this is a Json file let's begin with a pair of curly braces.
now let's take a look at some of the fields we can specify in this file.
there are two mandatory fields.
Name and version.
the name field defines the name of the package it must be lowercase one word and may contain hyphens or underscores.
for example greet hyphen code evolution.
the version field must be in the form x dot x dot X and follow the semantic versioning guidelines.
we will understand what is semantic versioning in a later video but for now our initial package version will be1.0.0.
it is the current version of the software that package.json is describing.
next we can add a description field.
which is used to search and describe packages in the npm registry.
let's set it to the text code evolution.
greeting package.
we can also add a keywords field.
which is an array of strings.
let's add two strings.
code Evolution and greet.
now this field is indexed by the npm registry to help find packages when someone searches for them.
finally we can specify the main field which defines the entry point of our project.
in our project this is index.js.
now there are plenty more fields and we will learn more about them as we progress through the other videos in the section but for now this is how you create and Define a package.json file.
but what I would like to point out is that we don't have to manually create a package.json file.
typically we use the npm cli to initialize a project with package.json.
so delete the file we have created navigate into the project folder.
and now run the command npm in it.
this will prompt you to enter values for some of the standard fields in package.json.
you can see the description right here npm in it utility will walk you through creating a package.json file it only covers the most common items and tries to guess sensible defaults.
and there are a few help commands as well.
but if you now take a look at the bottommost line we have package name and the default value it is suggesting is my custom package which is the name of our folder.
now you can enter a value.
such as grid code evolution.
or you can also press enter to stick to the defaults.
the version default value is 1.0.0 and I'm going to press enter as I'm happy with that.
I don't need a description press enter entry point is index.js press enter we don't need a test command we don't have a git repo we're okay with no keywords and no author.
the default license is ISC.
when you press enter again.
it will mention about to write to the custom package package.json file with these entries.
if you're happy with this we can press enter again which is the default yes.
now you can see a package.json file has been created in the custom package folder with all the values we have entered using the CLI.
pretty neat right well there is something better.
if you want to stick to the defaults and just change the project name you can use the dash dash yes option.
let me delete the package.json file.
and in the terminal run the command npm in it dash dash yes.
this will generate a package.json file with the default values.
without prompting for any user input.
we have our package.json with all the default values and we can simply change any value that we want to.
really simple as you can see.
now there are a few Fields here which I haven't covered earlier so please take it up as an exercise to research on the purpose of some of these fields here.
all right now that we understand package.js on is a configuration file for npm join me in the next video where we will learn how to install a package from the npm registry into our node.js project.
I'll see you in the next one"
