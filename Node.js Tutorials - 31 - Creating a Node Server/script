An overview of the preinstalled HTTP module was provided in the preceding video.
In this video, I'll show you step-by-step instructions for establishing an HTTP server in Nod
((((("In the previous video we had an introduction to the built-in HTTP module.
in this video Let's understand with code how to create a node server with the HTTP module.))))))

We begin with the module import.
Using need node colon http is the same as using const HTTP.
((((("Step 1 we import the module.
const HTTP is equal to require node colon http.))))))

In the second stage, we call the module's create server function.
Server that uses the Hypertext Transfer Protocol (HTTP).create.
((((("Step 2 we invoke the create server method on the module.
HTTP dot create server.))))))

Now, a callback function may be sent as an argument to this method.
Two parameters, request and response, are sent to this function. 
((((("now this method accepts a callback function as its argument.
this function in turn receives two arguments request and response.))))))

As it turns out, the HTTP module is another class that extends the event emitter family.
In fact, the Callback function we've set up here is a listener for incoming requests.
((((("now it turns out HTTP module also extends the event emitter class.
and the Callback function we have specified here is actually a request listener.))))))


((((("Whenever a request reaches the server, this callback is invoked.
There is request-specific data in the request argument..))))))

Additionally, in the subsequent videos, we will look at the request object's characteristics.
((((("and we will inspect a few properties on the request object in the upcoming videos.))))))

The server's answer is represented as an argument, which is then used to construct the reply that must be provided to the client. 
((((("an argument is the server response and we use it to build the response that has to be sent back to the client.))))))

Therefore, node will manage the incoming request, and our job will be to create the code for the answer.
We start by calling the appropriate head method on the response object. 
((((("so node will handle the incoming request and we have to write code to send back the response.
on the response object we first invoke the right head method.))))))

The HTTP status code is the parameter we pass in.
If your reply is accepted, you'll be charged 200.
((((("we specify an argument which is the HTTP status code.
this will be 200 for a successful response.))))))

The final bit of the reply might be text.
The end method of the response is called to do this. 
((((("next we can end the response with some text.
for that we invoke the end method on the response.))))))

add a string as an argument.
What up, planet!
We have a program ready to handle any kind of request at this point.
((((("and pass in a string.
hello world.
we have now written code to respond to any incoming request.))))))

Nonetheless, we must also instruct our server to accept incoming queries.
For this purpose, we use a constant to save the server that was generated by the create server function.
((((("however we must also inform our server to listen to any incoming requests.
for that we store the server created using the create server method in a constant.))))))

When creating a server through HTTP, using const server is the same as using http.createServer.
Next, we give a port number to the listen function through the server constant.
((((("const server is equal to http dot create server.
now in the next line on the server constant we invoke the listen method passing in a port number.))))))

The number three thousand.
Port numbers are analogous to house numbers in a multi-family building.
((((("three thousand.
you can think of port number as a door number in an apartment with many houses.))))))

A system may host several servers, each of which is a "node."The default port for a js server is 3000.
Optionally.
When the server begins to listen, you may additionally provide a callback function to be executed.
((((("on a machine there can be many other servers but are node.js server runs on Port 3000.
Optionally.
you can also specify a callback function for when the server starts to listen.))))))

The console server is listening on Port 3000, therefore we need add a callback function that logs in to it.
and that's about all there is to it!
We may now type node index into the terminal.
((((("let's add a callback function that logs to the console server running on Port 3000.
and that is pretty much it.
now in the terminal we can run node index.))))))

The log statement server is actively listening on TCP port 3000.
nonetheless, it should be stressed that this software does not exist.
((((("we see the log statement server running on Port 3000.
but what is important to note though is that the program doesn't exist.

Requests can be sent to Port3000 at this time.
and how do we put in a request? 
((((("it is now waiting for requests on Port3000.
and how do we make a request.))))))

OK, so we'll just do it in the browser.
To access it, enter localhost:3000 into the address bar.
((((("well we doit from the browser.
in the address bar type localhost colon 3000.))))))
 
Here, localhost is our own computer, which is serving as the server, and port 3000 is the port number we designated.
((((("here localhost refers to our own machine which is our server and 3000 is the port number we have specified in our code.))))))

press enter.
If we go to inspect element and click on the network tab, we should see Hello World shown there.
The request and answer can be viewed again after a refresh.
((((("press enter.
and we should see Hello World being displayed if you inspect element and open the network tab.
Refresh you can have a look at the request and response.))))))

The protocol conforms to the accepted norms of HTTP.
Importing the code that deals with HTTP only requires 10 lines of code. Make a server that accepts requests and returns a message when one is received. 
((((("it is standard http.
with just 10 lines of code we are able to import the HTTP related code create a server that listens to requests and responds with some text.))))))

The creation of a server using node is a common use case described in articles on node.js because of how easy it is to implement.
((((("it really is the simple to create a server with node and is a popular example you'll come across when reading about node.js.))))))

Although they aren't strictly required any longer, indicating the response's expected content type is a good idea.
Let's add another argument to right head as we're now answering in plain text.
((((("now all they're not necessary it is a good practice to specify the content type of the response.
currently we are responding plain text so let's add a second argument to right head.))))))

where the content type is set to Text/plane.
In the event that I now restart node index. 
((((("where we specify content type as Text slash plane.
if I now restart node index.))))))

Navigate to the node index by pressing Ctrl+C.
and revitalize.
Localhost.
((((("Ctrl C node index head to the browser.
and refresh.
Localhost.))))))

We can tell that the content type is Text/plane since it appears in the response headers.
I've already established that the content type header isn't required, but that leaves it up to the 
((((("in the response headers we can see content type is Text slash plane.
like I already mentioned the content type header is technically optional but then you're leaving it up to the 

browser to infer the nature of the material you're returning.
Whenever possible, I think it's important to label the content kind.
((((("browser to essentially guess what type of content you're returning.
I would always recommend specifying the content type.))))))

OK, I guess We'll get into more specifics regarding the node server in subsequent episodes, but for now I'll just briefly recap what we covered here.
((((("all right let's learn a few more details about the node server in the upcoming videos but for now let me quickly summarize what we have learned in this video.))))))

The initial step was to load the native HTTP module.
Next, we'll whip up a server with the help of the create server function.
((((("first we imported the built-in HTTP module.
next we use the create server method to create a server.))))))

The function takes a callback from a request listener, which is invoked for each request.
((((("the method accepts a request listener callback which gets executed on every request.))))))))))

The Callback function will have the requests and responses parameters injected into it automatically by note.
Both the request and response objects are used to communicate with the client; the former provides details about the latter. 
((((("note automatically injects the requests and response arguments into the Callback function.
the request object gives us information about the incoming request whereas the response object is used to send back a response to the client.)))))))))

As a last step, we tell the newly constructed server to accept connections on Port 3000
((((("finally we specify that the created server should listen to incoming requests on Port 3000.))))))))

As a brief exercise, I'd want you to log a request object to the console and examine the key-value pairs it produces.
((((("now as a small exercise I want you to log the request object to the console and have a quick look at the key value pairs logged in the terminal.)))))))))

Though there is much here that will be incomprehensible to you, I think it is important that you get a firm grasp of just how much data is at our disposal.
((((("I'm going to warn you though there is a whole bunch of information that will not make sense to you but I want you to understand how much information we have access to if we want to use it.)))))))))

The future videos will teach us even more about making and answering requests. 
((((("of course we will learn a bit more about requests and response in the upcoming videos as well.)))))))))

I hope you enjoyed the video, and if you did, please subscribe so you don't miss the next one. 
((((("alright then thank you for watching please do consider subscribing to the channel and I'll see you in the next one.))))))))))