welcome back in the previous video we had a look at the order of execution when the ioq is in picture in this video our Focus Still Remains on the ioq but we will slowly start moving towards the check queue as well there is a very important point to make note of which I will explain through the next experiment before we run our experiment I want to mention to queue a callback function into the check queue we can use a function called set immediate the syntax is very similar to process.nextstick where we pass in a callback function if this is clear let's head back to vs code and run our experiment now this will be experiment number nine and we are going to pick up from where we left off in the previous video we have a read file called back a next tick called back a promise result callback and a set timeout callback if you run this code we see the order of execution is next stick followed by promise followed by set timeout and finally read file and this agrees with our visual representation here but let me tell you there is a small detail that we haven't uncovered yet let's do that now with our ninth experiment after set timeout I'm going to use set immediate to queue up a callback function into the check queue check U is the queue after the ioq as you can see here in our visualization I want you to now pause the video and try figure out the output if I run node index you can see the output might not be what you expected we have set immediate logged before read file this is a little strange given the fact that ioq is before the check queue right well it is strange if you don't understand about this i o polling mentioned in between the two queues let me go over the code with this visualization and explain what exactly happens Under The Herd first all the five statements are executed on the call stack this will result in callbacks being queued up in the appropriate queues one index tick one in promise one in the timer queue one in the ioq and one in the check queue except that the read file callback is not queued up at the same time let me break this down for you when the control enters the event Loop the micro task queues are first checked for callbacks we have one each in the next EQ and the promise queue next tick Q gets priority and we see next stick one logged followed by promise one but the queues are empty and control moves on to the timer queue we have one callback which Logs set timeout 1 to the console now comes the interesting bit when the control reaches the ioq we expect the read file callback to be present and why wouldn't we we have a really long for Loop and read file should have completed by the time control enters the event Loop well the reality is that the event Loop has to poll to check if I O operations are complete and queue up only the completed operation callbacks which means when control enters the ioq for the first time it is still empty since it is empty control then proceeds to the polling part of the event Loop where it asks read file if it has completed read file says yes and the event Loop now queues up the associated callback function in the ioq however execution is past the ioq and the Callback has to wait for its turn control then proceeds to the check queue it finds one callback and Logs set immediate one to the console there's nothing more left in the current iteration and the event Loop starts a new iteration it sees micro task and timer queues are empty but the ioq now has a callback the Callback is executed and read file 1 is finally locked to the console this is the reason we see set immediate 1 logged before read file 1. in fact this is what happened with our previous experiment as well but we did not have further code to run and hence did not come across this Behavior but the inference from this experiment is that I O events are polled and callback functions are added to the ioq only after the input output operation is complete with this in mind let's proceed to understand more about the check queue in the next video thank you for watching please do consider subscribing to the channel and I'll see you in the next one