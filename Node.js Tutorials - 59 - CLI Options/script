in the previous video we learned how to create a basic CLI tool using node and npm.
in this video let's add some logic and also understand how to pass options tor cli.
let's begin.
I'm here atpokeyapi.co where you have access to a free Pokemon related rest API.
you can enter a Pokemon name and the API responds with a Json of properties applicable to that Pokemon.
if I type Charmander and click submit.
we get back details about Charmander such as abilities forms game indices Etc.
what I want to focus on though is just this moves property.
moves is an array of objects and each object has a move property.
each move is in turn an object with a name and URL.
for our Pokedex CLI I want to keep it really simple and display the first five moves for a given Pokemon.
if this requirement is clear let's head back to vs code and add the logic.
I'm going to begin with the function definition that prints the first five moves given a Pokemon name.
const print 5 Moves.
and this is an async function that accepts a Pokemon name.
and logs the first five moves to the console.
within the function we call the Pokemon API passing in the Pokemon name.
so const response is equal to a weight fetch and I'm going to copy paste the API from the website.
https pokeyapi.com API V2 slash Pokemon followed by Pokemon name.
next convert the response to Json.
const Pokemon is equal to a weight response dot Json.
next we extract the moves property from the Json.
Pokemon dot moves dot map and for each move we extract just the name.
then we log to the console only the first five moves so moves dot slice 0 comma five.
finally we call the function passing in a Pokemon name.
let's pass in Charmander once again.
and a small correction move should be de structured.
now what you should know is that this code is linked to the command and we don't have to run any additional steps to update the CLI with our changes.
we can run code evolution Pokedex and we see the first five moves locked in the terminal Mega Punch Fire Punch Thunder Punch scratch and sword stands our code works as expected.
let's now improve this code.
at the moment the Pokemon name is hard coded let's make it in such a way that the user can pass in a Pokemon name when running the CLI command itself.
now the way to pass arguments to a CLI tool is to pass a cli option.
in index.js we can add a log statement where we log process.arg V.
if we now run code Evolution Pokedex dash dash Pokemon is equal to Charmander.
we see an additional log from process.argary.
this is an array where the zeroth index is always path to The Interpreter and first index is path to the CLI.
from the second index though we have the passed in options.
we have passed in one option which is Pokemon is equal to Charmander.
now we can process this array but a better way is to use a package called yards let me install it npm install yards.
you can see it listed as a dependency in package.json.
Yorks converts options into key value pairs that we can easily access in our code in index.js let's import and use the package.
const ergs is equal to require yarks and we extract our GUI calling yards passing in process dot argue.
now instead of passing in Charmander.
we can pass in argue dot Pokemon.
and this is what yarx does.
it allows us to easily retrieve the Pokemon option value.
if we now run code Evolution Pokedex with an option Pokemon is equal to Charmander.
we see the same output as before.
run the CLI with Pokemon is equal to Mu.
and we see a different set of moves our CLI works as expected and has a few improvements.
in the next video let's add some interactivity to the CLI.
thank you for watching and I'll see you in the next one"
