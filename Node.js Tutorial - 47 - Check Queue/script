"in this video let's run a few moreexperiments to understand better aboutthe check queueplease do watch the previous five videosbefore continuingnow in the previous video we understoodabout i o polling that happens inbetween the ioq and check queuethat in turnhelped us understand why read file islocked after set immediatenow what if the io polling was completeand a callback did exist in the ioqlet's conduct an experiment for thatscenariofor experiment number 10 I'm going tomake a small change in our codeinstead of executing set immediate atthe endI'm going to execute it within the readfile called backI've also changed the message to reflectthis is inner set immediate inside readfilethe reason I've done this is to ensurethis set immediate callback is queued uponly after the i o polling is completepause for a minute and try to figure outthe outputif I run node indexwe can see this time set immediate islocked after read filefrom this we can infer thatcheck queue callbacks are executed aftermicro task queue callbacks timer queuecallbacks and ioq callbacks are executedlet's visualize the executionwhen the call stack executes allstatements in our code snippet we end upwith one callback in the next queue onein the promise queue and one in thetimer queuethere is no callback in the ioq yet as IO polling has not been completed this welearned in the previous videonow when there is no further code toexecute control enters the event Loopfirst call back from the next day queueis dq'd and executed which locks amessage to the consolenow that the next queue is emptyeventually proceeds to the promise queuethe Callback is dq'd and executed on thecall stack logging a message to theconsoleat this point the promise queue is emptyand the event Loop proceeds to the timerqueuewe have one callback which is dq'd andexecuted resulting in the third logmessagenow event Loop proceeds to the ioq butthis queue does not have any callbacksit then proceeds to the i o pollingphaseduring this phase the read fileoperation is complete which pushes acallback function into the ioqthe event Loop then proceeds to thecheck queue and the close queue whichare both emptythe loop then proceeds to the seconditerationit checks next to queue promise queuetimer queue all of which are empty andfinally arrives at ioqit encounters one new callback functionwhich gets executedthe fourth message is logged in theconsolebut the Callback function also containsa call to set immediate which queues upa callback function in the check queueevent Loop then proceeds from the ioqinto the check queue dqs the Callbackand executes the samethis results in the last message beinglogged in the consolehopefully this visualization makes senseif it does let's now proceed toexperiment number 11.this time within the read file callbackbut after set immediate callI'm going to paste a call toprocess.nextstick and promise.resolvefirst we have this isinnerprocess.net stick inside read fileand then we have this is innerpromise.result inside read fileI want you to pause again and try figureout the outputif I run node indexwe can see read file 1 is being lockedto the consoleand then we see process.nextstickand promise.resolve callbacks areexecuted before set immediate callbackfrom this we can infermicro task queue callbacks are executedafter IO callbacks and before checkqueue callbacksonce again let's visualize this forbetter understandingwhen the call stack executes allstatements we end up with one callbackin the next queueone in the promise queue and one in thetimer queuethere is no callback in the ioq yet asIO polling has not been completednow when there is no further code toexecute control enters the event Loopfirst call back from the next stickqueue is dq'd and execute it which locksa message to the consolenow that the next EQ is empty eventuallyproceeds to the promise queuethe Callback is dq'd and executed on thecall stack logging a message to theconsoleat this point the promise queue is emptyand the event Loop proceeds to the timerqueuewe have one callbackwhich is DQ and executedthis results in the third log statementin the consolenow event Loop proceeds to the ioq butthis queue does not have any callbacksit then proceeds to the i o pollingphase and during this phase the readfile operation is complete which pushesa callback function into the ioqpayment Loop then proceeds to the checkqueue and the close queue which are bothemptythe loop then proceeds to the nextiterationit checks next IQ promise queue timerqueue all of which are empty and finallyarrives at ioqit encounters one new callback functionwhich gets executedthe fourth message is logged to theconsolewith the read file callback alsocontains a call to nextdickpromise.resolve and set immediatethis results in a callback functionbeing queued up in the next queuepromise queue and the check queueit so happens that the event Loop beforeleaving the ioq and entering the checkqueue makes another check with the microtask queuesit first checks the next IQ sees thereis a callback and runs that callbackthis will print the correspondingmessage in the consolenext it checks the promise queue seesthere is a callback and runs thatcallbackthis will print the correspondingmessage in the consolefinally when the micro task queues areempty event Loop proceeds to the checkqueue dqs the Callback function andexecutes the samethis results in the last message beingprinted in the consolethe main point to take over here is thatcallbacks in the micro task queues areexecuted between the ioq and the checkqueue callbackshopefully the inference from experiment11 is clear to youlet's now proceed to the next experimentfor experiment number 12 I'm going tocopy paste a new code snippetlet me walk you through the codewe have a total of three calls to setimmediatewe have the corresponding log statementin each of themone two and threewithin the second set immediate thoughwe have a call to process Dot nextdickand promise.resolvepretty straightforward as you can seeonce again pause the video and tryfigure out the outputif I run node indexyou can see we have set immediate 1 2and before set immediate 3 we have nextstick 1 and promise.resolve onefrom this we can infer thatmicro task queues callbacks are executedin between check queue callbacksin our case in between the second andthird set immediate the micro taskqueues are executedthey have a priority that simply can'tbe ignoredall right let's head back to the slidesand visualize the executionwhen the call stack executes allstatements we end up with threecallbacks in the check queuewhen there is no further code to executecontrol enters the event Loopthe initial queues are skipped as thereare no callbackswe start with the check queue insteadthe first callback is dq'd and executedresulting in the log statementnext the second callback is also dq'dand executedthis results in the second log statementhowever the second callback also queuesup a callback in the next queue and thepromise queueas it turns out these skews have veryhigh priority and are checked in betweencheck queue callback executionsso after the second set immediatecallback in the check queue is executedthe Callback in the next queue is TQ andexecutedthat is followed by the promise queuecallback being dq'd and executednow when the micro task queues are emptycontrol returns back to the check queueand the third callback is dq'd andexecutedthis will print the final message in theconsolehopefully this is now clear to youalright for the 13th experiment which isthe final experiment in this videolet me point out the timer anomaly withthe check queue as wellI'm going to comment outthe existing codeand paste a new snippetit is really simple as you can see onecall to set timeout with zeromillisecond delay and a call to setimmediate right afterif I run the code several timesyou can see the order of execution isnot the same we have set timeout 1followed by set immediate oneand this is set immediate 1 followed byset timeout 1.now we have already covered thereasoning behind this in the video onioq so please do watch that video tounderstand why this happensbut the inference is that when runningset timeout with zero millisecond delayalong with a set immediate method theorder of execution can never beguaranteedof course you can add a time consumingfor Loop to guarantee the orderNow set timeout will always executebefore set immediateall right with these experiments I hopeyou're able to better understand theorder of execution of callbacks in thecheck queueif you are enjoying the content pleasedo leave a like And subscribe to thechannel I'll see you in the next one"