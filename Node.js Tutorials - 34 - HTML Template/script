
 We covered how to use HTML to reply in the last video.
We made a web page using HTML. 
(((((((((("in the previous video we learned how to respond with HTML.
we created an HTML file.

utilized the file system module (fs) to retrieve the file's contents and return them over the pipe. 
(((((((((("used the fs module.
to read the file contents and pipe it as a response.

"now this is terrific for everlasting HTML Pages with unchanging content.
(((((((((("now this is great for static HTML Pages where the content does not change.

The necessity to incorporate dynamic values into HTML is a reality, though. 
(((((((((("however you will come across a situation where you need to add some Dynamic values into the HTML.

Consider the case when it is necessary to show who is currently logged in.
Injecting the user's name into the HTML code.
(((((((((("for example let's say we need to display the logged in user's name.
how do we inject the username into our HTML.

string substitution will serve our purposes here as the simplest method.
(((((((((("well for our understanding we are going to use the most basic solution which is string replacement.

In this video, we'll learn how to make use of an existing HTML template by replacing strings to include dynamic content.
(((((((((("in this video Let's understand how to use a given HTML template and inject some Dynamic values through string replacement.

Since we need to handle this slightly differently, I'll be reverting to read file sync rather than FS dot construct read stream within the request listener.
(((((((((("within the request listener I'm going to remove FS dot create read stream and go back to read file sync as we need to handle this a little different.

Let me start by establishing a constant.
name, then assign it the value "vishwas." 
(((((((((("first let me declare a constant.
name and set it equal to the string vishwas.

This is the data we need to present in the HTML.
I'll put "hello" and "curly braces" before "name" and "welcome to node" in the HTML file.
(((((((((("this is the value that we need to display in our HTML.
so in the HTML file I'm going to add hello curly braces name welcome to node.

In our JavaScript program, we need to find the name constant and substitute it for the name between the double curly brackets.
(((((((((("what we now have to do is replace name in double curly braces with the name constant in our JavaScript file.

and as I've already indicated, we'll be doing a straightforward string exchange. 
(((((((((("and as I mentioned already we are going to rely on simple string replacement.

 After I have read the file's contents and saved them in the HTML constant, I will modify const HTML to allow HTML.
(((((((((("after reading the file contents and storing it in the HTML constant I'm going to change const HTML to let HTML which stores the file contents.

I'm going to change HTML to HTML dot replace in the next line.
and the name inside the double curly brackets will be the one we use going forward.
(((((((((("in the next line I'm going to update HTML to be HTML dot replace.
and we're going to replace name inside double curly braces.

using the same name vishwas consistently.
We respond with the revised HTML. 
(((((((((("with the name constant vishwas.
we send the updated HTML as response.

Node index must be restarted after saving the file.
Revisit the page in your browser.
(((((((((("if you now save the file restart node index.
refresh the browser.

The anticipated result must materialize. It's nice to meet you, vishwas.
This allows us to work with a single HTML template while yet making use of JavaScript's dynamic data.
(((((((((("we should see the expected output hello vishwas welcome to node.
so we are able to create one HTML template but have Dynamic values from JavaScript.

as you can see, it's not hard at all.
The use of HTML templates has therefore been concluded. 
(((((((((("really simple as you can see.
so that is about working with HTML templates.

Let's examine HTTP server routing in the subsequent video.
Please enjoy the next episode, and I'll see you then!
(((((((((("in the next video let's learn about routing with the HTTP server.
thank you for watching and I'll see you in the next one"