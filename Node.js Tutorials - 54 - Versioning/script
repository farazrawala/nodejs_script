"welcome back in the previous video welearned about the dependencies field inpackage.jsoneach dependency is code that is neededfor the functioning of our projecteach entry consists of the package namefollowed by the package versioninstalled in a projectin this video let's learn more aboutversioning in npmfirst you should know that the npminstall command always installs thelatest table versionin case of uppercase package it is 2.0.2you can however specify the versionnumber when installing a packagefor that we can run npm installupper hyphen caseat 2.0.0when I run this commandyou can see the version in package.jsonis now overwritten to 2.0.0a good use case for installing aspecific version is when the latestversion contains a bug that has beenoverlooked by the maintainersyou can install an earlier version startusing it and update when the latestversion has been patchedwe run npm install uppercaseand the latest version is reinstalledat this point I'm pretty sure you'rewondering why is the version numberrepresented as three digits with a DOTseparatorwhy is it not a simple sequentialversion number like 1 2 3 and so onwell that is because npm adopts what isknown as semantic versioninglet's understand more about thatsemantic versioning also known assomewhere is one of the most widelyadopted versioning systemsit is a simple set of rules andrequirements that dictate how versionnumbers are assigned and incrementedin today's world of web development newpackages are being created every singledayall of them at some point of timeundergo a change and it is crucial tokeep a semantic and historical track ofthose changesunder semantic versioning versionnumbers and the way they change conveymeaning about the underlying code andwhat has been modified from one versionto the nextin doing so it becomes easy tocommunicate your intentions to the usersof your softwareso how does it workwell a semantic version is of the formatx dot y dot Z where X stands for a majorversion y stands for a minor version andZ stands for a patchfor example uppercase version 2.0.2indicates a major version 2 a minorversion 0 and a patch version 2.now the real question is when do we bumpthe different version numbersobviously we can't increment the versionby a random number rightso here are the ruleswhen you fix a bug and the code staysbackwards compatible you increment thepatch versionfor example1.1.1 to 1.1.2when you add new functionality but thecode still stays backwards compatibleyou increment the minor versionbut this time you also reset the patchversion to zero for example1.1.1 to 1.2.0when you make changes and the code is nomore backwards compatible you incrementthe major versionin addition to that you have to resetthe miner and Patch versions to zerofor example1.1.1 to 2.0.0this semantic increment will help usersmake decisions regarding their projectsnow let's discuss a few more points onversioningsemantic versioning always starts with0.1.0 and that is because you neverstart with a patch on a brand newpackage0 dot y dot z a major version of 0 isused for initial developmentwhen the code is production ready youincrement to version 1.0.0at any point in time even the simplestof changes has to be done with anincrease in the version numberthat is pretty much how semanticversioning worksI would say there is definitely aresponsibility both as a developer andas a useras the creator of a package it is yourduty to update the appropriate versionbased on the changes you makeas a user it is my responsibility tokeep track of the changes and makenecessary Corrections in my project whenI update to the latest versionall right I hope that you now have abetter understanding of what a versionreally means what impact it has and whyit is so important to update itcorrectly especially if you writepackages that are used by othersthank you for watching please doconsider subscribing to the channel andI'll see you in the next one"
/watch?v=LuV5upokyBY&list=PLC3y8-rFHvwh8shCMHFA5kWxD9PaPwxaY&index=54:1 The resource https://i.ytimg.com/generate_204 was preloaded using link preload but not used within a few seconds from the window's load event. Please make sure it has an appropriate `as` value and it is preloaded intentionally.