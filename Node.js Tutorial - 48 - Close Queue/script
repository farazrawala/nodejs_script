"welcome back in this video let's take alook at the last cue in the event Loopwhich is the close queueand to understand about the close queuewe're going to run our 14th and finalexperiment in this section on learningabout the event Loop in node.jsonce again to save us some time I'mgoing to copy paste the codelet me walk you through the codefirst we import the fs modulenext we create a readable stream usingFS dot create read streamin the next line we close the streamusing the close methodnext we listen to the close event whichis emitted when the stream is closedthis is emitted as a result of theprevious lineto the close eventwe attach a listenerthis is a callback function which logsthis is from readable stream close eventcallbackyou may have guessed it already but thisis how we queue a callback function intothe close queueby adding listeners to close eventsnext we have a few familiar methodswe have a call to set immediate followedby set timeout followed bypromise.resolve and finally process dotnext deckI want you to now pause the video andtry figure out the outputif I run node indexwe see the order of executionfirst next sticksecond promise.resolve third set timeoutfourth set immediate and finally closeevent callbackfrom this we can inferclose queue callbacks are executed afterall other queues callbacks in a giveniteration of the event Looplet's visualize the executionwhen the call stack executes allstatements we end up with one callbackin each queue except the ioqwhen there is no further code to executecontrol enters the event Loopfirst call back in the next tick queueis DQ and executednext call back in the promise queue isDQ and executedthat is followed by the timer queuecallbacknext event Loop moves on to the checkqueuecallback is dq'd and executedfinally control moves on to the closequeuethe final callback is dq'd and executedreally simple if you have watched theprevious few videos about the event Loopall right if all the 14 differentexperiments and their correspondinginferences are now clear let's concludewith the following points about theevent cluethe event Loop is a c program thatorchestrates or coordinates theexecution of synchronous andasynchronous code in node.jsit coordinates the execution ofcallbacks in six different queuesthey are nextek promise timer i o checkand close queueswe use process dot nextick method toqueue into the next queuewe resolve or reject a promise to queueinto the promise queuewe use a set timeout or set interval toqueue into the timer queueexecute an async method to queue intothe ioquse set immediate function to queue intothe check queue and finally attach closeevent listeners to queue into the closequeuethe order of execution follows the sameorder listed here with an additionalpoint that next stick and promise queuesare executed in between each queue andalso in between each callback executionin the timer and check queueswith that we come to the end of thissection on understanding the internalsof how async code is executed in node.jsthank you for watching please doconsider subscribing to the channel andI'll see you in the next one"
/watch?v=XmOc2fCTKeQ&list=PLC3y8-rFHvwh8shCMHFA5kWxD9PaPwxaY&index=48:1 The resource https://i.ytimg.com/generate_204 was preloaded using link preload but not used within a few seconds from the window's load event. Please make sure it has an appropriate `as` value and it is preloaded intentionally.