"welcome to the eighth and final sectionin this course on node.js for beginnersin this section I want to cover a fewmiscellaneous topics that don't fallunder one particular categoryin this video we are going to learnabout the built-in cluster module innode.jsnow if you can recollect from theprevious sections I had mentioned thatnode is single threadedwhich means no matter how many cores youhave node only uses a single core ofyour CPUthis is fine for i o operations but ifthe code has long running and CPUintensive operations your applicationmight struggle from a performance pointof viewto help with the scenarionode.js introduced the cluster modulethe cluster module enables the creationof child processes also called workersthat run simultaneouslyit's also important to note that allcreated workers share the same serverportin simple words the cluster module givesyou a quick win when it comes tohandling the workload in a node.jsapplicationin this video Let's understand moreabout this module with an exampleI'm going to begin by creating a newfilenew cluster.jsthe idea is to first start with codethat doesn't use the cluster module andcompare it with one that uses thecluster modulewithin the file I'm going to copy pastea code snippet to save us some timeit is a very simple HTTP serversomething that shouldn't be new to youif you watched the section on built-inmoduleswe import the HTTP modulecreate a server and handle two routesin the home page route which is the rootwe have a simple response with plaintexthome pagein the slow page route though we have afor Loopthat simulates long-running CPU work itdoesn't matter what the code is but youjust have to know this takes a reallylong time to executeonce the for Loop completes we respondwith slow page as the textso we have one routethat should be fairly quick inresponding and another routethat will take a while before respondingwe then listen to the server on Port8000 and a callback method is attachedto lock a message to the console whenthe server is in fact listeningif the code is clearlet's now run nodeno clusterwe should see our server is running onPort 8000.in the browserI'm going to navigate to localhost Port8000.we see the home pageI will also open the network tabto monitor the time it takes to load thepagewhen I refreshyou can see the home page loads in aboutthree milliseconds which is pretty goodI will now open a new tabopen the network paneland this time navigate to localhost Port8000 slash slow pagewhen I press enteryou can see this takes about 4.72secondsway slower compared to the home pagebut this should not be surprising giventhe fact we have a long running for Loopin this routebut here is the interesting bitI want you to observe the time taken byboth the routes when I load the slowpage first and while this page isloading quickly load the home pageready refresh refreshyou can see this time slow page takesapproximately 5.7 secondsbut the home page also takes 4.9 secondsthe point 8 second difference isbasically the time I have taken toswitch tabs and refresh this pagebut it is pretty clear that homepagewhich would load in under fivemilliseconds is now taking five secondswell that is because the single threadof node.js is blocked with this for Loopand the server won't be able to respondto any new requestsslash slow page is basically blockingthe Home Routenow one way to fix this is to use thecluster module let's understand itsusagefirst let me explain with the slide howthe cluster module Works in node.jswhen we run node index in the terminalthe file is treated as a cluster masterand this master is in charge of spawningnew workers which run an instance of ournode applicationit is very important to note that themaster is only in charge of the workersstarting stopping restarting Etc butdoes not execute the application codeitselfit is not in charge of handling incomingrequests reading files Etcthat is up to the individual workerinstanceeach worker gets its own event Loopmemory and V8 instancein doing so we are able to share theworkload across different instanceswithout having to block incomingrequestslet's now head back to the editor andwrite code to distinguish between masterand worker and ensure they areresponsible for the right type of workI'm going to begin by creating a newfile called cluster.jsat the top I'm going to import thecluster modulenow we need to execute two differentSnippets of code depending on whetherthe file is treated as master or workerfor that we use the ease Master propertyon the cluster objectso F cluster dot is masterwe're going to logMaster processprocess.pidis runningif it is not masterwe're going to logworker process.pidstartedwhen you first run node cluster.js inthe terminalnode treats this file as master and setsis master to truewe can quickly verify this by runningnode clusterNASA process 3202 is runningnow let's focus on what code to run asMaster versus workeras Master we need to create new workersand for that we use the fork method onthe cluster objectlet's create two workers by calling ittwiceand for the worker we are pretty muchgoing to run the same code that we didin the non-cluster fileI'm going to copy paste the codeso the master is in charge of creatingworkers and the workers are in charge ofhandling the incoming requestswe are now ready to see the clusteringmodule in actionin the terminal run the command nodeclusterwe can see that the master and twoworkers are runningback in the browserif we refresh home pageit takes 24 millisecondsif we refresh the slow pageit takes 4.72 secondsbut what happens if we make the tworequests in parallelplease observe as I quickly reload theslow page first followed by the homepagerefresh and refreshyou can see the home page responds rightaway in two millisecondsthe slow page continues to takeapproximately the same amount of time 5Secondsbut it is clear that the second requestis not blocked well the first request isbeing servedwhat is happening isthe first worker with its node instancehandles the first requestthe second worker with its own nodeinstance handles the second requestthis as you can see leads to betterperformanceit is very important that you create twoworker threads at minimumif you create only one it is the same asno cluster scenariothe master will not handle any incomingrequest resulting in just one nodeinstance responsible for both incomingrequestsnow I'm pretty sure you have a questionin your mindwhy shouldn't we simply create a largenumber of workers using cluster.orgthat will ensure our app is performantrightwell that's not truewe should only create as many workers asthere are CPU cores on the machine theapp is runningif you create more workers then thereare logical cores on the computer it cancause an overhead as a system will haveto schedule all the created workers withfewer number of coresin case of my MacBook I have 10 logicalcores so I should only ever create 10workers to get the maximum performanceanything more and it is only hurting andhelpingto verify how many workers you cancreate head back to vs code and importthe OS modulein the next linelogOs Os dot CPUsdot lengthrun the codeand we see 10.of course this might be a differentnumber for your machinebut wait there is an easier way to doall of thisyou can simply ask someone else to runyour application as a cluster and alsodecide the best number of workers tocreate for your machineand that someone else is an npm packagecalled pm2let's install itthe command is sudo npm install Dashgpm2Dash G is required as we intend to runit from the command lineSudo is not required if you're onWindowsI already have this package installed soplease pause the video and run thecommandwhen the command completes we can askpm2 to run our new cluster file incluster moderemember we are basically trying toreplicate the cluster modewe have written manuallyso the file to run is no cluster and notclusterin the terminal run the command pm2start followed by the file namecluster.js followed by the option Dash Iand we pass in 0.here 0 indicates we want pm2 to figureout the optimum number of workers tocreateif you specify the number as 2 pm2 willcreate only two workersif I press enteryou can see a table has been displayedwe see 10 workers in total0 to 9.they all are online which means we canhead back to the browserrun slow page and quickly run home pagethe home page still loads in twomillisecondsand the slow page loads without blockingthe other requestreally simple as you can seenow to stop pm2 run the commandpm2 space stop spaceno cluster.jsthe status now reads startand that was quite a bit to cover aboutthe cluster module but hopefully it allmade senseit is something that you don't need as abeginner starting out with node.js but aconcept that is well worth knowing aboutplease do read up more about the pm2package for your understandingalright thank you for watching please doconsider subscribing to the channel andI'll see you in the next one"