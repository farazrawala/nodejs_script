"in the previous video we learned how toinstall the uppercase package into ourproject from the npm registryin this video let's learn how to usethat package in our codenow what you should know is that anypackage we install is basically a modulein node.jsearlier in the series we have seen howto import a local module and a built-inmodulefor a local moduleconst local module is equal to requiredot slashpath to modulefor a built-in module we've usedconst FS is equal to requirenode colon FSnow let's see how to import athird-party module which is nothing butthe package code we have installed inthe previous videonow the package name is upper hyphencaseif we head back to npmgs we can see asection on usagethis however uses the es module syntaxlet's convert it into common Jsback in vs codeconst uppercaseis equal torequireuppercasethis however Imports everything that isexported from the packagewe just need the uppercase functionso dot uppercasenow within the Contour log statementwe can invoke uppercasepassing in the stringwe can now call the grid functionpassing in a namevishwasand the terminal if we run node indexwe should see the expected output inuppercasehello vishwas welcome to code evolutionso we have successfully used a packageinstalled from the npm registry in ourown projectof course our requirement was a simpleone to convert text to uppercasebut you can imagine a more complexrequirement such as a need to deep clonean object in JavaScriptinstead of you having to write the codeand test that code you can rely on annpm packagelow Dash is a pretty popular JavaScriptutility Libraryit exposes various functionality thatyou can readily use in your projectyou can focus on the project requirementrather than building utility functionsbut I hope it is clear to you now as tohow we can install and use packages fromthe npm registryalright in the next video Let'sunderstand more about this dependenciesfield in package.jsonthank you for watching I'll see you inthe next one"