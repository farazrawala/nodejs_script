all right for our next topic of discussion let's understand about JavaScript runtime.
 JavaScript runtime is an environment which provides all the necessary components in order to use and run a JavaScript program.
 in the previous video I mentioned that every browser has a JavaScript engine.
 well as it turns out a JavaScript engine is one component in the JavaScript runtime.
 so what else does the JavaScript runtime consist of.
 let's understand using Chrome browser as an example.
 the JavaScript code we write is executed in Chrome's JavaScript runtime which consists of the following components.
 a JavaScript engine web apis.
 cues and an event Loop.
 the JavaScript engine is the V8 engine which executes JavaScript code.
 it consists of a call stack where JavaScript code gets executed and a heap which is nothing but memory to store all the variables that a JavaScript application needs.
 web apis refer to the Dom ERS such as set timeout and set interval promises browser storage Etc which add extra functionality to the JavaScript engine but are not part of JavaScript language itself.
 all web apis are provided by the browser.
 cues are where asynchronous tasks weight before they can be executed.
 finally we have the event Loop that ensures async tasks are executed in the right order.
 this at a very high level is the overview of the JavaScript runtime in the browser.
 if you want a more in-depth explanation please do watch my crash course on async JavaScript.
 but what I want to highlight with this visualization is that just a JavaScript engine is not sufficient in the grand scheme of things.
 the engine itself can execute ecmascript but JavaScript as we know it is ecmascript plus all these web apis like console log set timeout Dom apis Etc.
 so to run the JavaScript code we write every day a browser needs not just a JavaScript engine but a JavaScript runtime.
 so we have learned what is ecmascript which in turn helped us understand what is a JavaScript engine which in turn helped us understand what is a JavaScript runtime.
 with this knowledge in place let's now go back to the definition of what is node.js and see how the node.js runtime is different to that of the browser's runtime.
 I'll see you in the next one
